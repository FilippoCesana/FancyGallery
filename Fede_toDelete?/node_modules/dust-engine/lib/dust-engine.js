// Generated by CoffeeScript 1.10.0
(function() {
  var DEFAULT_TEMPLATE_EXTENSION, DustEngine, FileUtil, HOMEDIR, IS_INSTRUMENTED, LIB_DIR, ObjectUtil, Util, fs, maybe_require_common_dustjs_helpers, maybe_require_dustjs_helpers, maybe_require_dustjs_linkedin, path, yargs,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  path = require('path');

  fs = require('fs');

  HOMEDIR = path.join(__dirname, '..');

  IS_INSTRUMENTED = fs.existsSync(path.join(HOMEDIR, 'lib-cov'));

  LIB_DIR = IS_INSTRUMENTED ? path.join(HOMEDIR, 'lib-cov') : path.join(HOMEDIR, 'lib');

  Util = require('inote-util').Util;

  FileUtil = require('inote-util').FileUtil;

  ObjectUtil = require('inote-util').ObjectUtil;

  yargs = require('yargs');

  DEFAULT_TEMPLATE_EXTENSION = ".dust";

  maybe_require_dustjs_linkedin = function() {
    return require('dustjs-linkedin');
  };

  maybe_require_dustjs_helpers = function() {
    return require('dustjs-helpers');
  };

  maybe_require_common_dustjs_helpers = function() {
    return require('common-dustjs-helpers').CommonDustjsHelpers;
  };

  DustEngine = (function() {
    function DustEngine(options) {
      this._array_includes_match = bind(this._array_includes_match, this);
      this._string_ends_with = bind(this._string_ends_with, this);
      this._resolve_template_path = bind(this._resolve_template_path, this);
      this._maybe_check_that_file_exists = bind(this._maybe_check_that_file_exists, this);
      this._get_template_not_found = bind(this._get_template_not_found, this);
      this._get_on_load = bind(this._get_on_load, this);
      this._get_base_options = bind(this._get_base_options, this);
      this._get_base_context = bind(this._get_base_context, this);
      this._get_use_cache = bind(this._get_use_cache, this);
      this._get_trim_trailing_newline = bind(this._get_trim_trailing_newline, this);
      this._get_preserve_newlines = bind(this._get_preserve_newlines, this);
      this._get_no_onload = bind(this._get_no_onload, this);
      this._get_ignore_cache = bind(this._get_ignore_cache, this);
      this._get_template_extension = bind(this._get_template_extension, this);
      this._get_template_root = bind(this._get_template_root, this);
      this.render_dust_template_from_file = bind(this.render_dust_template_from_file, this);
      this.render_dust_template_from_string = bind(this.render_dust_template_from_string, this);
      this.render_for_express = bind(this.render_for_express, this);
      this.create_dust_context = bind(this.create_dust_context, this);
      this.get_template = bind(this.get_template, this);
      this.render_template = bind(this.render_template, this);
      this.compile_template = bind(this.compile_template, this);
      this.load_template = bind(this.load_template, this);
      this.on_load = bind(this.on_load, this);
      this.set_cached_template = bind(this.set_cached_template, this);
      this.get_cached_template = bind(this.get_cached_template, this);
      var alias, helper, i, j, k, l, len, len1, len2, len3, ref, ref1, ref2, ref3;
      if (options == null) {
        options = {};
      }
      if (options.dust != null) {
        this.dust = options.dust;
      } else {
        if (this._array_includes_match(options.helpers, /^dustjs(-|_)?helpers$/i)) {
          this.dust = maybe_require_dustjs_helpers();
        } else {
          this.dust = maybe_require_dustjs_linkedin();
        }
      }
      if (options.helpers != null) {
        if (!Array.isArray(options.helpers)) {
          options.helpers = [options.helpers];
        }
        ref = options.helpers;
        for (i = 0, len = ref.length; i < len; i++) {
          helper = ref[i];
          if (typeof helper === 'function') {
            helper(this.dust);
          } else if ((helper.export_to != null) && typeof helper.export_to === 'function') {
            helper.export_to(this.dust);
          } else if ((helper.exportTo != null) && typeof helper.exportTo === 'function') {
            helper.exportTo(this.dust);
          } else if ((helper.set_dust != null) && typeof helper.set_dust === 'function') {
            helper.set_dust(this.dust);
          } else if ((helper.setDust != null) && typeof helper.setDust === 'function') {
            helper.setDust(this.dust);
          } else if (typeof helper === 'string' && /^common(-|_)?dust(-|_)?js(-|_)?helpers$/i.test(helper)) {
            (new (maybe_require_common_dustjs_helpers())()).export_to(this.dust);
          }
        }
      }
      this.template_root = this._get_template_root(options);
      this.template_extension = this._get_template_extension(options);
      this.preserve_newlines = this._get_preserve_newlines(options);
      this.trim_trailing_newline = this._get_trim_trailing_newline(options);
      this.template_not_found = this._get_template_not_found(options);
      this.use_cache = this._get_use_cache(options);
      if (this.use_cache) {
        this.cache = {};
      }
      this.base_context = this._get_base_context(options);
      this.base_options = this._get_base_options(options);
      if (this._get_on_load(options)) {
        this.dust.onLoad = this._get_on_load(options);
      } else if (!this._get_no_onload(options)) {
        this.dust.onLoad = (function(_this) {
          return function(t, o, c) {
            return _this.on_load(t, o, c);
          };
        })(this);
      }
      ref1 = ['render_from_string', 'render_string_template', 'render_string', 'renderDustTemplateFromString', 'renderFromString', 'renderStringTemplate', 'renderString'];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        alias = ref1[j];
        this[alias] = this.render_dust_template_from_string;
      }
      ref2 = ['render', 'render_from_file', 'render_file_template', 'render_file', 'renderDustTemplateFromFile', 'renderFromFile', 'renderFileTemplate', 'renderFile'];
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        alias = ref2[k];
        this[alias] = this.render_dust_template_from_file;
      }
      ref3 = ['renderForExpress'];
      for (l = 0, len3 = ref3.length; l < len3; l++) {
        alias = ref3[l];
        this[alias] = this.render_for_express;
      }
    }

    DustEngine.prototype.get_cached_template = function(key) {
      var cached, template;
      template = null;
      if (this.use_cache) {
        cached = this.cache[key];
        if ((cached != null) && typeof cached === 'function') {
          template = cached;
        }
      }
      return template;
    };

    DustEngine.prototype.set_cached_template = function(key, template) {
      if (this.use_cache) {
        return this.cache[key] = template;
      } else {
        return this.dust.cache = {};
      }
    };

    DustEngine.prototype.on_load = function(template_name, options, callback) {
      var template_extension, template_path, template_root;
      if (typeof options === 'function' && (callback == null)) {
        callback = options;
        options = null;
      }
      if (options == null) {
        options = {};
      }
      if (this.base_options != null) {
        options = ObjectUtil.merge(this.base_options, options);
      }
      template_root = this._get_template_root(options);
      template_extension = this._get_template_extension(options);
      template_path = this._resolve_template_path(template_root, template_name, template_extension);
      return this._maybe_check_that_file_exists(template_path, template_name, options, callback, (function(_this) {
        return function() {
          var ref;
          return fs.readFile(template_path, {
            encoding: (ref = options.encoding) != null ? ref : 'utf8'
          }, function(err, data) {
            if (err != null) {
              return callback(err);
            } else {
              data = data != null ? typeof data.toString === "function" ? data.toString() : void 0 : void 0;
              if (_this._get_trim_trailing_newline(options) && /\n$/.test(data)) {
                data = data.substring(0, data.length - 1);
              }
              if (_this._get_preserve_newlines(options)) {
                data = data.replace(/\n/g, "\n{~n}");
              }
              return callback(null, data);
            }
          });
        };
      })(this));
    };

    DustEngine.prototype.load_template = function(template_name, options, callback) {
      if (typeof options === 'function' && (callback == null)) {
        callback = options;
        options = null;
      }
      return this.on_load(template_name, options, (function(_this) {
        return function(err, data) {
          var template;
          if (err != null) {
            return callback(err);
          } else {
            template = _this.compile_template(data);
            if ((options.template_name != null) && !_this._get_ignore_cache(options)) {
              _this.set_cached_template(template_name, template);
            }
            return callback(null, template);
          }
        };
      })(this));
    };

    DustEngine.prototype.compile_template = function(template_string) {
      return this.dust.compileFn(template_string);
    };

    DustEngine.prototype.render_template = function(template, context, callback) {
      var ctx;
      if (typeof context === 'function' && (callback == null)) {
        callback = context;
        context = null;
      }
      if (typeof template !== 'function') {
        template = this.compile_template(template);
      }
      ctx = this.create_dust_context(context);
      return template(ctx, callback);
    };

    DustEngine.prototype.get_template = function(template_name, options, callback) {
      var cached;
      if (typeof options === 'function' && (callback == null)) {
        callback = options;
        options = null;
      }
      if (options == null) {
        options = {};
      }
      if (!this._get_ignore_cache(options)) {
        cached = this.get_cached_template(template_name);
      }
      if (cached != null) {
        return callback(null, cached);
      } else {
        return this.load_template(template_name, options, callback);
      }
    };

    DustEngine.prototype.create_dust_context = function(ctx, meta_ctx) {
      var base;
      if (Array.isArray(ctx) && ctx.length === 2 && (meta_ctx == null)) {
        meta_ctx = ctx[1];
        ctx = ctx[0];
      }
      base = this.dust.makeBase(this.base_context, meta_ctx);
      return base.push(ctx);
    };

    DustEngine.prototype.render_for_express = function(view_name, context, callback) {
      var options;
      if (typeof context === 'function' && (callback == null)) {
        callback = context;
        context = null;
      } else if (Array.isArray(context) && context.length === 2) {
        options = context[1];
        context = context[0];
      }
      return this.get_template(view_name, options, (function(_this) {
        return function(err, template) {
          if (err != null) {
            return callback(err);
          } else {
            return _this.render_template(template, context, callback);
          }
        };
      })(this));
    };

    DustEngine.prototype._warned_about_render_time_helpers = false;

    DustEngine.prototype.render_dust_template_from_string = function(template_string, context, options, callback) {
      var preserve_newlines, template;
      if (typeof options === 'function' && (callback == null)) {
        callback = options;
        options = null;
      } else if (typeof context === 'function' && (options == null) && (callback == null)) {
        callback = context;
        context = null;
      }
      if ((context != null) && (options != null) && (!Array.isArray(context))) {
        context = [context, options];
      }
      if (((options != null ? options.helpers : void 0) != null) && !this._warned_about_render_time_helpers) {
        console.error("\nWARNING: The 'helpers' option was passed to the DustEngine's render function\n         but that option is only supported during the initialization of the\n         DustEngine instance. It cannot be set at render-time.");
        this._warned_about_render_time_helpers = true;
      }
      if (options == null) {
        options = {};
      }
      preserve_newlines = this._get_preserve_newlines(options);
      if (preserve_newlines) {
        template_string = template_string.replace(/\n/g, "\n{~n}");
      }
      template = this.compile_template(template_string);
      if ((options.template_name != null) && !this._get_ignore_cache(options)) {
        this.set_cached_template(options.template_name, template);
      }
      return this.render_template(template, context, callback);
    };

    DustEngine.prototype.render_dust_template_from_file = function(template_file, context, options, callback) {
      var template_path;
      if (typeof options === 'function' && (callback == null)) {
        callback = options;
        options = null;
      }
      if ((context != null) && (options != null) && (!Array.isArray(context))) {
        context = [context, options];
      }
      if (options == null) {
        options = {};
      }
      template_path = this._resolve_template_path(this._get_template_root(options), template_file, this._get_template_extension(options));
      return this._maybe_check_that_file_exists(template_path, template_file, options, callback, (function(_this) {
        return function() {
          var ref;
          return fs.readFile(template_path, {
            encoding: (ref = options.encoding) != null ? ref : 'utf8'
          }, function(err, template_string) {
            if (err != null) {
              return callback(err);
            } else {
              template_string = template_string != null ? template_string.toString() : void 0;
              if (_this._get_trim_trailing_newline(options) && /\n$/.test(template_string)) {
                template_string = template_string.substring(0, template_string.length - 1);
              }
              if (options.template_name == null) {
                options.template_name = template_file;
              }
              return _this.render_dust_template_from_string(template_string, context, options, callback);
            }
          });
        };
      })(this));
    };

    DustEngine.prototype._get_template_root = function(options) {
      var ref, ref1, ref2, ref3, ref4, ref5;
      if (options == null) {
        options = {};
      }
      return (ref = (ref1 = (ref2 = (ref3 = (ref4 = (ref5 = options.template_root) != null ? ref5 : options.template_dir) != null ? ref4 : options.view_root) != null ? ref3 : options.view_dir) != null ? ref2 : options.viewroot) != null ? ref1 : this.template_root) != null ? ref : process.cwd();
    };

    DustEngine.prototype._get_template_extension = function(options) {
      var extension, ref, ref1, ref2, ref3;
      if (options == null) {
        options = {};
      }
      extension = (ref = (ref1 = (ref2 = (ref3 = options.template_extension) != null ? ref3 : options.templateExtension) != null ? ref2 : options.template_ext) != null ? ref1 : options.templateExt) != null ? ref : this.template_extension;
      if (!(extension === false || extension === '')) {
        if (extension == null) {
          extension = DEFAULT_TEMPLATE_EXTENSION;
        }
        if (!/^\./.test(extension)) {
          extension = "." + extension;
        }
      } else if (extension === false) {
        extension = '';
      }
      return extension;
    };

    DustEngine.prototype._get_ignore_cache = function(options) {
      var ref, ref1, ref2, ref3, ref4, ref5, ref6;
      if (options == null) {
        options = {};
      }
      return Util.truthy_string((ref = (ref1 = (ref2 = (ref3 = (ref4 = ((ref5 = options.no_cache) != null ? ref5 : options.disable_cache) || options.ignore_cache) != null ? ref4 : options.noCache) != null ? ref3 : options.disableCache) != null ? ref2 : options.ignoreCache) != null ? ref1 : (ref6 = options.cache) === false || ref6 === 'false') != null ? ref : false);
    };

    DustEngine.prototype._get_no_onload = function(options) {
      if (options == null) {
        options = {};
      }
      return Util.truthy_string(options.no_onload || options.no_onLoad || options.noOnload || options.noOnLoad || ((options.onLoad === false) || (options.onload === false) || (options.on_load === false)));
    };

    DustEngine.prototype._get_preserve_newlines = function(options) {
      var ref, ref1, ref2;
      if (options == null) {
        options = {};
      }
      return Util.truthy_string((ref = (ref1 = (ref2 = options.preserve_newlines) != null ? ref2 : options.preserveNewlines) != null ? ref1 : this.preserve_newlines) != null ? ref : false);
    };

    DustEngine.prototype._get_trim_trailing_newline = function(options) {
      var ref, ref1, ref2;
      if (options == null) {
        options = {};
      }
      return Util.truthy_string((ref = (ref1 = (ref2 = options.trim_trailing_newline) != null ? ref2 : options.trimTrailingNewline) != null ? ref1 : this.trim_trailing_newline) != null ? ref : false);
    };

    DustEngine.prototype._get_use_cache = function(options) {
      var ref, ref1, ref2;
      if (options == null) {
        options = {};
      }
      return Util.truthy_string((ref = (ref1 = (ref2 = options.use_cache) != null ? ref2 : options.useCache) != null ? ref1 : this.use_cache) != null ? ref : false);
    };

    DustEngine.prototype._get_base_context = function(options) {
      var ref, ref1, ref2;
      if (options == null) {
        options = {};
      }
      return (ref = (ref1 = (ref2 = options.base_context) != null ? ref2 : options.baseContext) != null ? ref1 : this.base_context) != null ? ref : {};
    };

    DustEngine.prototype._get_base_options = function(options) {
      var ref, ref1, ref2;
      if (options == null) {
        options = {};
      }
      return (ref = (ref1 = (ref2 = options.base_options) != null ? ref2 : options.baseOptions) != null ? ref1 : this.base_options) != null ? ref : {};
    };

    DustEngine.prototype._get_on_load = function(options) {
      var ref, ref1, ref2;
      if (options == null) {
        options = {};
      }
      return (ref = (ref1 = (ref2 = options.onLoad) != null ? ref2 : options.on_load) != null ? ref1 : options.onload) != null ? ref : null;
    };

    DustEngine.prototype._get_template_not_found = function(options) {
      var ref, ref1, ref2, ref3;
      if (options == null) {
        options = {};
      }
      return (ref = (ref1 = (ref2 = (ref3 = options.template_not_found) != null ? ref3 : options.templateNotFound) != null ? ref2 : options.templatenotfound) != null ? ref1 : this.template_not_found) != null ? ref : null;
    };

    DustEngine.prototype._maybe_check_that_file_exists = function(filename, template_name, options, original_callback, cb) {
      var template_not_found;
      template_not_found = this._get_template_not_found(options);
      if (template_not_found != null) {
        return fs.exists(filename, (function(_this) {
          return function(exists) {
            if (exists) {
              return cb();
            } else {
              return template_not_found(template_name, options, original_callback);
            }
          };
        })(this));
      } else {
        return cb();
      }
    };

    DustEngine.prototype._resolve_template_path = function(template_root, template_name, template_extension) {
      var template_path;
      if ((template_root != null) && (template_name == null) && (template_extension == null)) {
        template_name = template_root;
        template_root = null;
      }
      if (template_root == null) {
        template_root = this.template_root;
      }
      if (template_extension == null) {
        template_extension = this.template_extension;
      }
      if (this.template_extension && !this._string_ends_with(template_name, template_extension)) {
        template_name = "" + template_name + template_extension;
      }
      if (template_root != null) {
        template_path = path.resolve(template_root, template_name);
      } else {
        template_path = path.resolve(template_name);
      }
      return template_path;
    };

    DustEngine.prototype._string_ends_with = function(str, suffix) {
      return str.substr(-1 * suffix.length) === suffix;
    };

    DustEngine.prototype._array_includes_match = function(list, pattern) {
      var elt, i, len;
      if (list == null) {
        list = [];
      }
      if (typeof list === 'string') {
        return pattern.test(list);
      } else {
        for (i = 0, len = list.length; i < len; i++) {
          elt = list[i];
          if (pattern.test(elt)) {
            return true;
          }
        }
        return false;
      }
    };

    DustEngine.main = function(process_argv, console_log, console_err, process_exit) {
      var DEBUG, ERROR, ERROR_CONTEXT_PARSE, ERROR_DURING_RENDER, ERROR_INVALID_CLP, FINE, INFO, LOG, WARN, arg_parser, argv, context, engine, err, error, error1, options, root, secondary_opts, template, vlog;
      if (process_argv == null) {
        process_argv = process.argv;
      }
      if (console_log == null) {
        console_log = console.log;
      }
      if (console_err == null) {
        console_err = console.error;
      }
      if (process_exit == null) {
        process_exit = process.exit;
      }
      ERROR_INVALID_CLP = 1;
      ERROR_CONTEXT_PARSE = 2;
      ERROR_DURING_RENDER = 3;
      argv = null;
      ERROR = -1;
      WARN = 0;
      LOG = 1;
      INFO = 2;
      DEBUG = 3;
      FINE = 4;
      vlog = function() {
        var args, level;
        level = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (level === ERROR) {
          return console_err.apply(null, args);
        } else {
          if (level <= argv.verbose) {
            args = args.map(function(arg) {
              if ((arg != null) && arg.constructor === Object) {
                return JSON.stringify(arg, null, 2);
              } else {
                return arg;
              }
            });
            return console_log.apply(null, args);
          }
        }
      };
      options = {};
      options.t = {
        alias: "template",
        describe: "Dust template",
        required: true
      };
      options.r = {
        alias: "template-root",
        describe: "Root directory for relative template paths; defaults to parent of template"
      };
      options.j = {
        alias: "context-json",
        describe: "Dust context as a JSON string"
      };
      options.c = {
        alias: "context",
        describe: "Dust context as a JSON file"
      };
      options.o = {
        alias: "output",
        describe: "Output file; defaults to stdout"
      };
      options.q = {
        alias: "quiet",
        describe: "Be less chatty.",
        boolean: true,
        "default": false
      };
      options.n = {
        alias: "preserve-newlines",
        describe: "When truthy, newlines in templates will be preserved.",
        boolean: true,
        "default": false
      };
      options.ttn = {
        alias: "trim-trailing-newline",
        describe: "When truthy, any final newline (\\n) found in a template will be stripped.",
        boolean: true,
        "default": false
      };
      arg_parser = yargs.options(options);
      arg_parser.help().alias('h', 'help');
      arg_parser.version(function() {
        var pjson;
        pjson = require(path.join(HOMEDIR, 'package.json'));
        return pjson.name + " v" + pjson.version;
      });
      arg_parser.count('verbose').alias('v', 'verbose').describe('verbose', "Be more chatty");
      arg_parser.usage('Usage: $0 [OPTIONS]');
      argv = arg_parser.parse(process_argv);
      vlog(FINE, "Read the following from the command line:", argv);
      if (argv.quiet) {
        argv.verbose = argv.v = 0;
      }
      if (argv.output === "-") {
        argv.o = argv.output = null;
      }
      if (argv.help) {
        yargs.showHelp(console_log);
        process_exit(0);
      }
      if ((argv.j != null) && (argv.c != null)) {
        vlog(ERROR, "ERROR: Cannot use both --context and --context-json at the same time.");
        process_exit(ERROR_INVALID_CLP);
      }
      context = null;
      if (argv.j != null) {
        vlog(INFO, "Reading context from command line.");
        try {
          context = JSON.parse(argv.j);
        } catch (error) {
          err = error;
          vlog(ERROR, "ERROR trying to load context from --context-json JSON string.");
          vlog(ERROR, "error:", err);
          vlog(ERROR, "input:", argv.j);
          process_exit(ERROR_CONTEXT_PARSE);
        }
      } else if (argv.c) {
        vlog(INFO, "Reading context from file at '" + argv.c + "'.");
        try {
          context = FileUtil.load_json_file_sync(argv.c);
        } catch (error1) {
          err = error1;
          vlog(ERROR, "ERROR trying to load context from JSON file at '" + argv.c + "'.");
          vlog(ERROR, "error:", err);
          process_exit(ERROR_CONTEXT_PARSE);
        }
      }
      vlog(DEBUG, "Read the following context:", context);
      template = argv.t;
      if (argv.r != null) {
        root = argv.r;
        template = path.resolve(root, template);
      } else {
        root = path.dirname(template);
        template = path.relative(root, template);
      }
      vlog(INFO, "Using template root '" + root + "'. Resolved template to '" + template + "'.");
      secondary_opts = {
        template_root: root,
        preserve_newlines: argv.n,
        trim_trailing_newline: argv.ttn,
        helpers: ["CommonDustjsHelpers", "DustjsHelpers"]
      };
      context = [context, secondary_opts];
      vlog(DEBUG, "Full context:", context);
      vlog(LOG, "Rendering template at '" + template + "' (relative to template root).");
      engine = new DustEngine(secondary_opts);
      return engine.render(template, context, function(err, content) {
        if (err != null) {
          vlog(ERROR, "ERROR while processing template at '" + template + "'.");
          vlog(ERROR, "error:", err);
          return process_exit(ERROR_DURING_RENDER);
        } else {
          if (argv.o != null) {
            vlog(INFO, "Writing to '" + argv.o + "'");
            return fs.writeFile(argv.o, content, function(err) {
              if (err != null) {
                vlog(ERROR, "ERROR while writing output to '" + argv.o + "'.");
                vlog(ERROR, "error:", err);
                return process_exit(ERROR_DURING_WRITE);
              } else {
                vlog(LOG, "Output written to '" + argv.o + "'");
                return process_exit(0);
              }
            });
          } else {
            console_log(content);
            return process_exit(0);
          }
        }
      });
    };

    return DustEngine;

  })();

  exports.DustEngine = DustEngine;

  exports.INSTANCE = new DustEngine();

  exports.renderForExpress = exports.render_for_express = exports.INSTANCE.render_for_express;

  exports.render = exports.renderFile = exports.render_file = exports.INSTANCE.render_dust_template_from_file;

  exports.renderString = exports.render_string = exports.INSTANCE.render_dust_template_from_stirng;

  exports.main = DustEngine.main;

  if (require.main === module) {
    DustEngine.main();
  }

}).call(this);
